Pour obtenir la taille de la pile utilisateur, je tape:

[romain.pereira@vm0 tp]$ ulimit -a

Sortie obtenue:

core file size          (blocks, -c) 0
data seg size           (kbytes, -d) unlimited
scheduling priority             (-e) 0
file size               (blocks, -f) unlimited
pending signals                 (-i) 33151
max locked memory       (kbytes, -l) 64
max memory size         (kbytes, -m) unlimited
open files                      (-n) 1024
pipe size            (512 bytes, -p) 8
POSIX message queues     (bytes, -q) 819200
real-time priority              (-r) 0
stack size              (kbytes, -s) 8192
cpu time               (seconds, -t) unlimited
max user processes              (-u) 4096
virtual memory          (kbytes, -v) unlimited
file locks                      (-x) unlimited

=> La taille de la pile des processus est réglé sur 8192 kbytes

---------------------------------------------------------------------

Pour faire un dépassement de pile, voici 2 solutions écrites en C

/**
 * 1ère façon : Allocation d'un tableau trop large sur la pile
 */
void main() {
        char overflow[8192 * 1024];
}

/**
 * 2ème façon : appel récursif infini
 */
void main() {
	main();
}

etc... Le tout est de dépasser la capacité de la pile

Compilation puis execution, le programme plante
```
[romain.pereira@vm0 tp]$ gcc stackoverflow.c
[romain.pereira@vm0 tp]$ ./a.out 
Erreur de segmentation
```
=> Il y a eu un dépassement de pile

---------------------------------------------------------------------

Correction du dépassement de pile:

Dans le cas d'une pile trop petite (1er cas) :
	- on peut aggrandir la taille de la pile en utilisant:
		
		ulimit -s {TAILLE_EN_KBYTES}

Dans le cas d'une récursion infini (2ème cas) :
	- mettre une condition sortie dans la récursion


